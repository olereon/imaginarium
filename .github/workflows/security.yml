name: Security

on:
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/security.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scan
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > audit-report.json || true

          # Check for high/critical vulnerabilities
          CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ High/Critical vulnerabilities found"
            npm audit --audit-level=moderate
            exit 1
          else
            echo "✅ No high/critical vulnerabilities found"
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: audit-report.json

  # Container security scan
  container-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t imaginarium-security-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'imaginarium-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'imaginarium-security-scan:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Code security scan
  code-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --summary --json > licenses.json

          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"

          if license-checker --failOn "$PROBLEMATIC_LICENSES" --summary; then
            echo "✅ No problematic licenses found"
          else
            echo "❌ Problematic licenses detected"
            license-checker --failOn "$PROBLEMATIC_LICENSES"
            exit 1
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # OWASP dependency check
  owasp-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'imaginarium'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression suppressions.xml

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: reports/

  # Security summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-scan, secret-scan, license-check, owasp-scan]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ Dependency scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "✅ Container scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.code-scan.result }}" == "success" ]; then
            echo "✅ Code scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ Secret scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "✅ License check: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ License check: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.owasp-scan.result }}" == "success" ]; then
            echo "✅ OWASP scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ OWASP scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify security results
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ (needs.dependency-scan.result == 'success' && needs.container-scan.result == 'success' && needs.code-scan.result == 'success' && needs.secret-scan.result == 'success' && needs.license-check.result == 'success' && needs.owasp-scan.result == 'success') && 'success' || 'failure' }}
          text: |
            🔒 Security Scan Results

            Repository: ${{ github.repository }}

            Results:
            - Dependency scan: ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }}
            - Container scan: ${{ needs.container-scan.result == 'success' && '✅' || '❌' }}
            - Code scan: ${{ needs.code-scan.result == 'success' && '✅' || '❌' }}
            - Secret scan: ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }}
            - License check: ${{ needs.license-check.result == 'success' && '✅' || '❌' }}
            - OWASP scan: ${{ needs.owasp-scan.result == 'success' && '✅' || '❌' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
