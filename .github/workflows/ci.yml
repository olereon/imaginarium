name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

jobs:
  # Job to detect changes in monorepo packages
  changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      shared: ${{ steps.changes.outputs.shared }}
      core: ${{ steps.changes.outputs.core }}
      ui: ${{ steps.changes.outputs.ui }}
      server: ${{ steps.changes.outputs.server }}
      client: ${{ steps.changes.outputs.client }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - '.github/workflows/**'
            shared:
              - 'packages/shared/**'
            core:
              - 'libs/core/**'
            ui:
              - 'libs/ui/**'
            server:
              - 'apps/server/**'
            client:
              - 'apps/client/**'
            docker:
              - 'Dockerfile'
              - 'docker-compose*.yml'
              - 'docker/**'
              - '.dockerignore'

  # Install dependencies and cache
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint:check

      - name: Format check
        run: npm run format:check

  # Type checking
  typecheck:
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

  # Build packages
  build:
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            libs/*/dist
            apps/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Test packages
  test:
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.packages == 'true'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: imaginarium_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/imaginarium_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=high

  # Docker build and test
  docker:
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: server-prod
          push: false
          tags: imaginarium-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build client image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: client-prod
          push: false
          tags: imaginarium-client:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.prod.yml config

  # Quality gates
  quality-gate:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, test, security, docker]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.typecheck.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.security.result }}" == "failure" || 
                "${{ needs.docker.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure()
    steps:
      - name: Notify on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ CI pipeline failed for ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
