{
  "openapi": "3.0.3",
  "info": {
    "title": "Imaginarium API",
    "description": "AI-powered content generation pipeline automation platform API",
    "version": "1.0.0",
    "contact": {
      "name": "Imaginarium Team",
      "email": "api@imaginarium.example.com",
      "url": "https://github.com/your-org/imaginarium"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.imaginarium.example.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and receive JWT tokens",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User registration",
        "description": "Create a new user account",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/api/pipelines": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List pipelines",
        "description": "Retrieve user's pipelines with optional filtering and pagination",
        "operationId": "listPipelines",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by pipeline name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": ["draft", "published", "archived"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipelines retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Pipelines"],
        "summary": "Create pipeline",
        "description": "Create a new pipeline",
        "operationId": "createPipeline",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePipelineRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pipeline created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/pipelines/{id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get pipeline",
        "description": "Retrieve a specific pipeline with full details",
        "operationId": "getPipeline",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update pipeline",
        "description": "Update an existing pipeline",
        "operationId": "updatePipeline",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePipelineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipeline updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineDetail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete pipeline",
        "description": "Delete a pipeline",
        "operationId": "deletePipeline",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pipeline deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/pipelines/{id}/run": {
      "post": {
        "tags": ["Pipeline Execution"],
        "summary": "Execute pipeline",
        "description": "Execute a pipeline with provided inputs",
        "operationId": "executePipeline",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutePipelineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Synchronous execution completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionSyncResponse"
                }
              }
            }
          },
          "202": {
            "description": "Asynchronous execution queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionAsyncResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "securePassword123"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password", "confirmPassword"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "securePassword123"
          },
          "confirmPassword": {
            "type": "string",
            "minLength": 8,
            "example": "securePassword123"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user_123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "editor", "viewer"],
            "example": "editor"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "Pipeline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pipeline_123"
          },
          "name": {
            "type": "string",
            "example": "Content Generation Pipeline"
          },
          "description": {
            "type": "string",
            "example": "Automated blog post generation with AI"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "published", "archived"],
            "example": "published"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["ai", "content", "automation"]
              },
              "category": {
                "type": "string",
                "example": "content-generation"
              }
            }
          },
          "nodeCount": {
            "type": "integer",
            "example": 5
          },
          "lastExecuted": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:30:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-10T14:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T08:00:00Z"
          }
        }
      },
      "PipelineNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "node_1"
          },
          "type": {
            "type": "string",
            "enum": ["input", "output", "openai", "transform", "filter"],
            "example": "openai"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "example": 300
              },
              "y": {
                "type": "number",
                "example": 100
              }
            }
          },
          "config": {
            "type": "object",
            "example": {
              "model": "gpt-4",
              "maxTokens": 2048,
              "temperature": 0.7
            }
          }
        }
      },
      "PipelineConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "conn_1"
          },
          "source": {
            "type": "string",
            "example": "node_1"
          },
          "target": {
            "type": "string",
            "example": "node_2"
          },
          "sourceHandle": {
            "type": "string",
            "example": "output"
          },
          "targetHandle": {
            "type": "string",
            "example": "input"
          }
        }
      },
      "PipelineDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pipeline"
          },
          {
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PipelineNode"
                }
              },
              "connections": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PipelineConnection"
                }
              },
              "executions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionSummary"
                }
              }
            }
          }
        ]
      },
      "CreatePipelineRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "My New Pipeline"
          },
          "description": {
            "type": "string",
            "example": "Pipeline description"
          },
          "metadata": {
            "type": "object"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineNode"
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineConnection"
            }
          }
        }
      },
      "UpdatePipelineRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineNode"
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineConnection"
            }
          }
        }
      },
      "ExecutePipelineRequest": {
        "type": "object",
        "properties": {
          "inputs": {
            "type": "object",
            "example": {
              "node_1": {
                "text": "Write about sustainable energy"
              }
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "async": {
                "type": "boolean",
                "default": true
              },
              "webhookUrl": {
                "type": "string",
                "format": "url"
              }
            }
          }
        }
      },
      "ExecutionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "exec_456"
          },
          "status": {
            "type": "string",
            "enum": ["queued", "running", "completed", "failed"],
            "example": "completed"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:30:00Z"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:32:15Z"
          },
          "duration": {
            "type": "integer",
            "description": "Duration in milliseconds",
            "example": 135000
          }
        }
      },
      "ExecutionAsyncResponse": {
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string",
            "example": "exec_789"
          },
          "status": {
            "type": "string",
            "example": "queued"
          },
          "estimatedDuration": {
            "type": "integer",
            "description": "Estimated duration in seconds",
            "example": 120
          },
          "queuePosition": {
            "type": "integer",
            "example": 3
          },
          "webhookUrl": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "ExecutionSyncResponse": {
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string",
            "example": "exec_790"
          },
          "status": {
            "type": "string",
            "example": "completed"
          },
          "results": {
            "type": "object",
            "example": {
              "node_2": {
                "text": "# Sustainable Energy: A Path Forward..."
              }
            }
          },
          "duration": {
            "type": "integer",
            "example": 45000
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:05:45Z"
          }
        }
      },
      "PipelineListResponse": {
        "type": "object",
        "properties": {
          "pipelines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pipeline"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 20
          },
          "total": {
            "type": "integer",
            "example": 45
          },
          "totalPages": {
            "type": "integer",
            "example": 3
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "example": "Request validation failed"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "requestId": {
                "type": "string",
                "example": "req_abc123"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T11:30:00Z"
              }
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Pipelines",
      "description": "Pipeline management operations"
    },
    {
      "name": "Pipeline Execution",
      "description": "Pipeline execution and monitoring"
    },
    {
      "name": "Users",
      "description": "User profile and settings"
    }
  ]
}