/**
 * Test script for Pipeline and PipelineVersion models with JSON configurations
 */

import { PrismaClient } from '@prisma/client'
import { PipelineRepository } from '../repositories/pipeline.repository.js'
import { PipelineVersionRepository } from '../repositories/pipeline-version.repository.js'
import { PipelineService } from '../services/pipeline.service.js'
import type { PipelineConfiguration } from '@imaginarium/shared'

const prisma = new PrismaClient()

async function testPipelineJsonFields() {
  console.log('🧪 Testing Pipeline JSON field structures...')

  try {
    // Create repositories and service
    const pipelineRepo = new PipelineRepository()
    const versionRepo = new PipelineVersionRepository()
    const pipelineService = new PipelineService(pipelineRepo, versionRepo)

    // Test complex pipeline configuration
    const complexConfiguration: PipelineConfiguration = {
      nodes: [
        {
          id: 'input-1',
          type: 'text-input',
          position: { x: 100, y: 100 },
          config: {
            label: 'Enter your prompt',
            placeholder: 'Describe what you want to create...',
            multiline: true,
            maxLength: 500,
            validation: {
              required: true,
              minLength: 10,
            },
          },
        },
        {
          id: 'transformer-1',
          type: 'text-transformer',
          position: { x: 400, y: 100 },
          config: {
            transformationType: 'enhance',
            model: 'gpt-4',
            systemPrompt: 'You are a creative writing assistant. Enhance the user\'s input with vivid details.',
            parameters: {
              temperature: 0.7,
              maxTokens: 200,
              topP: 0.9,
            },
          },
        },
        {
          id: 'ai-image-1',
          type: 'openai-image',
          position: { x: 700, y: 100 },
          config: {
            model: 'dall-e-3',
            size: '1024x1024',
            quality: 'hd',
            style: 'vivid',
            revisedPrompt: true,
          },
        },
        {
          id: 'conditional-1',
          type: 'conditional',
          position: { x: 400, y: 300 },
          config: {
            condition: 'output.length > 100',
            truePath: 'ai-image-1',
            falsePath: 'output-error',
          },
        },
        {
          id: 'output-1',
          type: 'image-output',
          position: { x: 1000, y: 100 },
          config: {
            format: 'png',
            compression: 80,
            watermark: {
              enabled: true,
              text: 'Generated by Imaginarium',
              position: 'bottom-right',
              opacity: 0.3,
            },
          },
        },
        {
          id: 'output-error',
          type: 'error-output',
          position: { x: 700, y: 400 },
          config: {
            message: 'Input too short. Please provide more details.',
            redirectTo: 'input-1',
          },
        },
      ],
      connections: [
        {
          id: 'conn-1',
          source: 'input-1',
          target: 'transformer-1',
          sourceHandle: 'output',
          targetHandle: 'input',
        },
        {
          id: 'conn-2',
          source: 'transformer-1',
          target: 'conditional-1',
          sourceHandle: 'output',
          targetHandle: 'input',
        },
        {
          id: 'conn-3',
          source: 'conditional-1',
          target: 'ai-image-1',
          sourceHandle: 'true',
          targetHandle: 'prompt',
        },
        {
          id: 'conn-4',
          source: 'ai-image-1',
          target: 'output-1',
          sourceHandle: 'image',
          targetHandle: 'input',
        },
        {
          id: 'conn-5',
          source: 'conditional-1',
          target: 'output-error',
          sourceHandle: 'false',
          targetHandle: 'input',
        },
      ],
      settings: {
        timeout: 300000, // 5 minutes
        retryCount: 3,
        parallel: false,
        caching: {
          enabled: true,
          ttl: 3600, // 1 hour
          strategy: 'lru',
        },
        errorHandling: {
          strategy: 'continue',
          logLevel: 'error',
        },
      },
    }

    const metadata = {
      tags: ['ai', 'image-generation', 'creative', 'conditional'],
      category: 'content-creation',
      difficulty: 'intermediate',
      estimatedDuration: 120, // seconds
      author: 'test-user',
      version: '1.0.0',
      requirements: {
        apiKeys: ['openai'],
        credits: 1,
      },
      features: {
        conditional: true,
        errorHandling: true,
        watermarking: true,
      },
    }

    // Test 1: Create pipeline with complex JSON configuration
    console.log('✅ Test 1: Creating pipeline with complex JSON configuration...')
    const userId = 'test-user-id'
    
    const pipeline = await pipelineService.createPipeline({
      userId,
      name: 'Complex AI Image Generator',
      description: 'Advanced pipeline with conditional logic, text transformation, and error handling',
      configuration: complexConfiguration,
      metadata,
    })

    console.log(`✅ Created pipeline: ${pipeline.id}`)

    // Test 2: Validate configuration structure
    console.log('✅ Test 2: Validating configuration structure...')
    const validation = pipelineRepo.validateConfiguration(complexConfiguration)
    if (!validation.isValid) {
      throw new Error(`Configuration validation failed: ${validation.errors.join(', ')}`)
    }
    console.log('✅ Configuration validation passed')

    // Test 3: Retrieve and parse JSON fields
    console.log('✅ Test 3: Retrieving and parsing JSON fields...')
    const retrievedConfig = await pipelineRepo.getConfiguration(pipeline.id)
    const retrievedMetadata = await pipelineRepo.getMetadata(pipeline.id)

    if (!retrievedConfig || !retrievedMetadata) {
      throw new Error('Failed to retrieve configuration or metadata')
    }

    // Verify the complex nested structures are preserved
    const config = retrievedConfig as PipelineConfiguration
    if (config.nodes.length !== 6) {
      throw new Error(`Expected 6 nodes, got ${config.nodes.length}`)
    }

    if (config.connections.length !== 5) {
      throw new Error(`Expected 5 connections, got ${config.connections.length}`)
    }

    // Check that complex nested config is preserved
    const transformerNode = config.nodes.find(n => n.id === 'transformer-1')
    if (!transformerNode?.config?.parameters?.temperature) {
      throw new Error('Complex nested configuration not preserved')
    }

    console.log('✅ JSON fields retrieved and parsed correctly')

    // Test 4: Create and manage versions
    console.log('✅ Test 4: Testing version management...')
    
    // Modify configuration
    const modifiedConfig = { ...complexConfiguration }
    modifiedConfig.nodes[0].config.placeholder = 'Modified placeholder text'
    modifiedConfig.settings!.timeout = 600000 // 10 minutes

    const { version } = await pipelineService.updateConfiguration(
      pipeline.id,
      modifiedConfig,
      userId,
      'Updated timeout and placeholder text'
    )

    console.log(`✅ Created version: ${version.version}`)

    // Test 5: Compare configurations
    console.log('✅ Test 5: Testing configuration comparison...')
    const diff = pipelineService.compareConfigurations(complexConfiguration, modifiedConfig)
    
    if (diff.modified.length === 0) {
      throw new Error('Configuration diff should detect modifications')
    }

    console.log(`✅ Detected ${diff.modified.length} modifications`)

    // Test 6: Analyze configuration
    console.log('✅ Test 6: Testing configuration analysis...')
    const analysis = await pipelineService.analyzeConfiguration(pipeline.id)
    
    if (analysis.nodeCount !== 6) {
      throw new Error(`Expected 6 nodes in analysis, got ${analysis.nodeCount}`)
    }

    if (analysis.complexity !== 'moderate') {
      throw new Error(`Expected moderate complexity, got ${analysis.complexity}`)
    }

    console.log(`✅ Analysis: ${analysis.nodeCount} nodes, ${analysis.connectionCount} connections, complexity: ${analysis.complexity}`)

    // Test 7: Test export/import
    console.log('✅ Test 7: Testing export/import functionality...')
    const exportData = await pipelineService.exportPipeline(pipeline.id)
    
    const importedPipeline = await pipelineService.importPipeline(
      exportData,
      userId,
      'Imported Complex Pipeline'
    )

    console.log(`✅ Exported and imported pipeline: ${importedPipeline.id}`)

    // Test 8: Test optimization
    console.log('✅ Test 8: Testing configuration optimization...')
    const { optimizedConfig, optimizations } = await pipelineService.optimizeConfiguration(pipeline.id)
    
    console.log(`✅ Optimization suggestions: ${optimizations.length > 0 ? optimizations.join(', ') : 'None needed'}`)

    // Test 9: Large JSON payload test
    console.log('✅ Test 9: Testing large JSON payload...')
    const largeConfig = { ...complexConfiguration }
    
    // Add many nodes to test large payloads
    for (let i = 0; i < 50; i++) {
      largeConfig.nodes.push({
        id: `large-node-${i}`,
        type: 'test-node',
        position: { x: i * 100, y: i * 50 },
        config: {
          data: new Array(100).fill(0).map((_, j) => ({
            id: j,
            value: `test-value-${i}-${j}`,
            nested: {
              level1: {
                level2: {
                  level3: `deep-value-${i}-${j}`,
                  array: new Array(10).fill(`item-${i}-${j}`),
                },
              },
            },
          })),
        },
      })
    }

    const largePipeline = await pipelineService.createPipeline({
      userId,
      name: 'Large Configuration Test',
      description: 'Testing large JSON payload handling',
      configuration: largeConfig,
    })

    console.log(`✅ Created large pipeline with ${largeConfig.nodes.length} nodes`)

    // Verify large config can be retrieved
    const retrievedLargeConfig = await pipelineRepo.getConfiguration(largePipeline.id) as PipelineConfiguration
    if (retrievedLargeConfig.nodes.length !== largeConfig.nodes.length) {
      throw new Error('Large configuration not preserved correctly')
    }

    console.log('✅ Large JSON payload test passed')

    // Cleanup
    await prisma.pipeline.deleteMany({
      where: {
        userId,
        name: {
          in: ['Complex AI Image Generator', 'Imported Complex Pipeline', 'Large Configuration Test']
        }
      }
    })

    console.log('🎉 All Pipeline JSON field tests passed!')

  } catch (error) {
    console.error('❌ Test failed:', error)
    throw error
  }
}

// Export for use in other test files
export { testPipelineJsonFields }

// Run tests if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  testPipelineJsonFields()
    .then(() => {
      console.log('✅ All tests completed successfully')
      process.exit(0)
    })
    .catch((error) => {
      console.error('❌ Tests failed:', error)
      process.exit(1)
    })
    .finally(async () => {
      await prisma.$disconnect()
    })
}